<?php

use Proengeno\Edifact\Message\Messages\Orders_17103;

class Orders_17103Test extends TestCase 
{
    protected $vaildOders = [];
    protected $vaildOdersString = [];

    public function setUp()
    {
        foreach ($this->getValidOrders('17103') as $ordersString) {
            $this->vaildOders[] = Orders_17103::fromString($ordersString);
            $this->vaildOdersString[] = $ordersString;
        }
    }

	public function test_valid_orders_17103_from_string()
	{
        $i = 0;
        foreach ($this->vaildOders as $key => $orders) {
            $orders->validate();

            //Prüfe ob die Richtige Klasse aufgerufen wird
            $this->assertEquals(get_class($orders), Orders_17103::class);
            // Prüfe ob der Gebaute String dem übergebenen String entspricht
            $this->assertEquals((string)$orders, $this->vaildOdersString[$i]);
            $i++;
        }
    }

	public function test_invalid_orders_17103_from_string()
	{
        foreach ($this->getInvalidOrders('17103') as $exceptionMessage => $ordersString) {
            try {
                $orders = Orders_17103::fromString($ordersString);
                $orders->validate();
            } catch (Exception $e) {
                $this->assertContains($exceptionMessage, $e->getMessage());
            }
        }
    }

    private function getValidOrders($type)
    {
        switch ($type) {
            case '17103':
                return ["UNA:+.? 'UNH+O160482A7C2+ORDERS:D:09B:UN:1.1e'BGM+7+O160482A7C2'DTM+137:201509222020:203'IMD++Z10'IMD++Z14+Z07'RFF+Z13:17103'NAD+MS+9800372700002::332'NAD+MR+9870008200006::332'NAD+DP'LOC+172+DE7000821308800000000004000037310'LIN+1'DTM+163:201509010000?+02:303'DTM+164:201509220000?+02:303'LIN+2'DTM+163:201509010000?+02:303'DTM+164:201509220000?+02:303'UNS+S'UNT+15+O160482A7C2'UNH+O160482A7C2+ORDERS:D:09B:UN:1.1e'BGM+7+O160482A7C2'DTM+137:201509222020:203'IMD++Z10'IMD++Z14+Z07'RFF+Z13:17103'NAD+MS+9800372700002::332'NAD+MR+9870008200006::332'NAD+DP'LOC+172+DE7000821308800000000004000037310'LIN+1'DTM+163:201509010000?+02:303'DTM+164:201509220000?+02:303'LIN+2'DTM+163:201509010000?+02:303'DTM+164:201509220000?+02:303'UNS+S'UNT+15+O160482A7C2'UNZ+1+O160482A7C2'"];
        }
    }
    
    private function getInvalidOrders($type)
    {
        switch ($type) {
            case '17103':
                return [
                    "Unerwartetes Segement RFF, IMD erwartet." => "UNA:+.? 'UNH+O160482A7C2+ORDERS:D:09B:UN:1.1e'BGM+7+O160482A7C2'DTM+137:201509222020:203'IMD++Z14+Z07'RFF+Z13:17103'NAD+MS+9800372700002::332'NAD+MR+9870008200006::332'NAD+DP'LOC+172+DE7000821308800000000004000037310'LIN+1'DTM+163:201509010000?+02:303'DTM+164:201509220000?+02:303'LIN+2'DTM+163:201509010000?+02:303'DTM+164:201509220000?+02:303'UNS+S'UNT+15+O160482A7C2'UNH+O160482A7C2+ORDERS:D:09B:UN:1.1e'BGM+7+O160482A7C2'DTM+137:201509222020:203'IMD++Z10'IMD++Z14+Z07'RFF+Z13:17103'NAD+MS+9800372700002::332'NAD+MR+9870008200006::332'NAD+DP'LOC+172+DE7000821308800000000004000037310'LIN+1'DTM+163:201509010000?+02:303'DTM+164:201509220000?+02:303'LIN+2'DTM+163:201509010000?+02:303'DTM+164:201509220000?+02:303'UNS+S'UNT+15+O160482A7C2'UNZ+1+O160482A7C2'",
                    "Unerwartetes Segement UNS, DTM erwartet." => "UNA:+.? 'UNH+O160482A7C2+ORDERS:D:09B:UN:1.1e'BGM+7+O160482A7C2'DTM+137:201509222020:203'IMD++Z10'IMD++Z14+Z07'RFF+Z13:17103'NAD+MS+9800372700002::332'NAD+MR+9870008200006::332'NAD+DP'LOC+172+DE7000821308800000000004000037310'LIN+1'DTM+163:201509010000?+02:303'DTM+164:201509220000?+02:303'LIN+2'DTM+163:201509010000?+02:303'UNS+S'UNT+15+O160482A7C2'UNH+O160482A7C2+ORDERS:D:09B:UN:1.1e'BGM+7+O160482A7C2'DTM+137:201509222020:203'IMD++Z10'IMD++Z14+Z07'RFF+Z13:17103'NAD+MS+9800372700002::332'NAD+MR+9870008200006::332'NAD+DP'LOC+172+DE7000821308800000000004000037310'LIN+1'DTM+163:201509010000?+02:303'DTM+164:201509220000?+02:303'LIN+2'DTM+163:201509010000?+02:303'DTM+164:201509220000?+02:303'UNS+S'UNT+15+O160482A7C2'UNZ+1+O160482A7C2'",
                    "Zeile 24, Segment IMD, 7081: Daten-Element nicht enthalten, aber benötigt." => "UNA:+.? 'UNH+O160482A7C2+ORDERS:D:09B:UN:1.1e'BGM+7+O160482A7C2'DTM+137:201509222020:203'IMD++Z10'IMD++Z14+Z07'RFF+Z13:17103'NAD+MS+9800372700002::332'NAD+MR+9870008200006::332'NAD+DP'LOC+172+DE7000821308800000000004000037310'LIN+1'DTM+163:201509010000?+02:303'DTM+164:201509220000?+02:303'LIN+2'DTM+163:201509010000?+02:303'DTM+164:201509220000?+02:303'UNS+S'UNT+15+O160482A7C2'UNH+O160482A7C2+ORDERS:D:09B:UN:1.1e'BGM+7+O160482A7C2'DTM+137:201509222020:203'IMD++'IMD++Z14+Z07'RFF+Z13:17103'NAD+MS+9800372700002::332'NAD+MR+9870008200006::332'NAD+DP'LOC+172+DE7000821308800000000004000037310'LIN+1'DTM+163:201509010000?+02:303'DTM+164:201509220000?+02:303'LIN+2'DTM+163:201509010000?+02:303'DTM+164:201509220000?+02:303'UNS+S'UNT+15+O160482A7C2'UNZ+1+O160482A7C2'",
                ];
        }
    }
}
